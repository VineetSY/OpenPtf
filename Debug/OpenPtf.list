
OpenPtf.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000328  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080004b0  080004b8  000104b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .init_array   00000004  080004b0  080004b0  000104b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080004b4  080004b4  000104b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000000  20000000  20000000  000104b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ram2         00000000  10000000  10000000  000104b8  2**0
                  CONTENTS
  7 .bss          00000020  20000000  20000000  00020000  2**2
                  ALLOC
  8 ._user_heap_stack 00000400  20000020  20000020  00020000  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000104b8  2**0
                  CONTENTS, READONLY
 10 .debug_info   000014ba  00000000  00000000  000104e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000049c  00000000  00000000  000119a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000000d0  00000000  00000000  00011e40  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000088  00000000  00000000  00011f10  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  0001c2f1  00000000  00000000  00011f98  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00001332  00000000  00000000  0002e289  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0009ce05  00000000  00000000  0002f5bb  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007b  00000000  00000000  000cc3c0  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00000198  00000000  00000000  000cc43c  2**2
                  CONTENTS, READONLY, DEBUGGING
 19 .stabstr      0000003f  00000000  00000000  000cc5d4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000000 	.word	0x20000000
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000498 	.word	0x08000498

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000004 	.word	0x20000004
 80001c4:	08000498 	.word	0x08000498

080001c8 <IOPortInit>:
 *  @param - NA
 *
 *  @retval- NA
 **************************************************************************************************/
void IOPortInit(void)
{
 80001c8:	b480      	push	{r7}
 80001ca:	af00      	add	r7, sp, #0

	/*Reset and clock control - Advanced high performance bus- Enabling GPIO Port A*/
	RCC->AHB2ENR |= RCC_AHB2ENR_GPIOAEN;
 80001cc:	4b1d      	ldr	r3, [pc, #116]	; (8000244 <IOPortInit+0x7c>)
 80001ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80001d0:	4a1c      	ldr	r2, [pc, #112]	; (8000244 <IOPortInit+0x7c>)
 80001d2:	f043 0301 	orr.w	r3, r3, #1
 80001d6:	64d3      	str	r3, [r2, #76]	; 0x4c

	//Setup control registers for the LED output
	//Mode Register for output
	GPIOA ->MODER |= (GPIO_MODER_MODE5_0 | GPIO_MODER_MODE6_0);
 80001d8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80001dc:	681b      	ldr	r3, [r3, #0]
 80001de:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80001e2:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 80001e6:	6013      	str	r3, [r2, #0]
	GPIOA ->MODER &= ~(GPIO_MODER_MODE5_1 | GPIO_MODER_MODE6_1);
 80001e8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80001ec:	681b      	ldr	r3, [r3, #0]
 80001ee:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80001f2:	f423 5320 	bic.w	r3, r3, #10240	; 0x2800
 80001f6:	6013      	str	r3, [r2, #0]

	//Output type register (push pull)
	GPIOA ->OTYPER &= ~(GPIO_OTYPER_OT5 | GPIO_OTYPER_OT6);
 80001f8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80001fc:	685b      	ldr	r3, [r3, #4]
 80001fe:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000202:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8000206:	6053      	str	r3, [r2, #4]

	//SPEED Register (High speed)
	GPIOA ->OSPEEDR |= GPIO_OSPEEDR_OSPEED5_0 | GPIO_OSPEEDR_OSPEED5_1 | GPIO_OSPEEDR_OSPEED6_0 | GPIO_OSPEEDR_OSPEED6_1;
 8000208:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800020c:	689b      	ldr	r3, [r3, #8]
 800020e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000212:	f443 5370 	orr.w	r3, r3, #15360	; 0x3c00
 8000216:	6093      	str	r3, [r2, #8]

	//Pull up pull down register
	GPIOA ->PUPDR &= ~(GPIO_PUPDR_PUPD5 | GPIO_PUPDR_PUPD6);
 8000218:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800021c:	68db      	ldr	r3, [r3, #12]
 800021e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000222:	f423 5370 	bic.w	r3, r3, #15360	; 0x3c00
 8000226:	60d3      	str	r3, [r2, #12]

	//Bit set reset register
	//Turn ON the LED at PA5 and PA6
	GPIOA ->BSRR |= (GPIO_BSRR_BS5 | GPIO_BSRR_BS6); //set pin 5,6 on port A
 8000228:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800022c:	699b      	ldr	r3, [r3, #24]
 800022e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000232:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8000236:	6193      	str	r3, [r2, #24]


	return;
 8000238:	bf00      	nop
}
 800023a:	46bd      	mov	sp, r7
 800023c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000240:	4770      	bx	lr
 8000242:	bf00      	nop
 8000244:	40021000 	.word	0x40021000

08000248 <IOPinMode>:
 *  @param in - Mode: output mode for the selected pin
 *
 *  @retval- NA
 **************************************************************************************************/
void IOPinMode(uint8 Pin, uint8 Mode)
{
 8000248:	b480      	push	{r7}
 800024a:	b083      	sub	sp, #12
 800024c:	af00      	add	r7, sp, #0
 800024e:	4603      	mov	r3, r0
 8000250:	460a      	mov	r2, r1
 8000252:	71fb      	strb	r3, [r7, #7]
 8000254:	4613      	mov	r3, r2
 8000256:	71bb      	strb	r3, [r7, #6]
	switch(Mode)
 8000258:	79bb      	ldrb	r3, [r7, #6]
 800025a:	2b00      	cmp	r3, #0
 800025c:	d002      	beq.n	8000264 <IOPinMode+0x1c>
 800025e:	2b01      	cmp	r3, #1
 8000260:	d011      	beq.n	8000286 <IOPinMode+0x3e>
			GPIOA ->BSRR |= (GPIO_BSRR_BS6);
			GPIOA ->BSRR |= (GPIO_BSRR_BS5);
			break;

		default:
			break;
 8000262:	e021      	b.n	80002a8 <IOPinMode+0x60>
			GPIOA ->BRR |= (GPIO_BRR_BR5);
 8000264:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000268:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800026a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800026e:	f043 0320 	orr.w	r3, r3, #32
 8000272:	6293      	str	r3, [r2, #40]	; 0x28
			GPIOA ->BRR |= (GPIO_BRR_BR6);
 8000274:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000278:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800027a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800027e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000282:	6293      	str	r3, [r2, #40]	; 0x28
			break;
 8000284:	e010      	b.n	80002a8 <IOPinMode+0x60>
			GPIOA ->BSRR |= (GPIO_BSRR_BS6);
 8000286:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800028a:	699b      	ldr	r3, [r3, #24]
 800028c:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000290:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000294:	6193      	str	r3, [r2, #24]
			GPIOA ->BSRR |= (GPIO_BSRR_BS5);
 8000296:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800029a:	699b      	ldr	r3, [r3, #24]
 800029c:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80002a0:	f043 0320 	orr.w	r3, r3, #32
 80002a4:	6193      	str	r3, [r2, #24]
			break;
 80002a6:	bf00      	nop
	}
}
 80002a8:	bf00      	nop
 80002aa:	370c      	adds	r7, #12
 80002ac:	46bd      	mov	sp, r7
 80002ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b2:	4770      	bx	lr

080002b4 <ReloadTimerInit>:
 *  @param - NA
 *
 *  @retval - NA
 **************************************************************************************************/
void ReloadTimerInit(void)
{
 80002b4:	b480      	push	{r7}
 80002b6:	af00      	add	r7, sp, #0
	/*Timer TIM1 clock enable*/
//	RCC->APB2ENR |= RCC_APB2ENR_TIM2EN;
	RCC->APB1ENR1 |= RCC_APB1ENR1_TIM2EN;
 80002b8:	4b1b      	ldr	r3, [pc, #108]	; (8000328 <ReloadTimerInit+0x74>)
 80002ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80002bc:	4a1a      	ldr	r2, [pc, #104]	; (8000328 <ReloadTimerInit+0x74>)
 80002be:	f043 0301 	orr.w	r3, r3, #1
 80002c2:	6593      	str	r3, [r2, #88]	; 0x58

	/*TIM1 configured as a down counter*/
	TIM2->CR1 |= TIM_CR1_DIR;
 80002c4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80002c8:	681b      	ldr	r3, [r3, #0]
 80002ca:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80002ce:	f043 0310 	orr.w	r3, r3, #16
 80002d2:	6013      	str	r3, [r2, #0]

	/*TIM1 Pre-scaler Auto reload register value set to max*/
	TIM2 ->ARR |= 0xFFFF;
 80002d4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80002d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80002da:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80002de:	ea6f 4313 	mvn.w	r3, r3, lsr #16
 80002e2:	ea6f 4303 	mvn.w	r3, r3, lsl #16
 80002e6:	62d3      	str	r3, [r2, #44]	; 0x2c

	/*TIM1 update interrupt enable*/
	TIM2->DIER |= TIM_DIER_UIE;
 80002e8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80002ec:	68db      	ldr	r3, [r3, #12]
 80002ee:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80002f2:	f043 0301 	orr.w	r3, r3, #1
 80002f6:	60d3      	str	r3, [r2, #12]

	/*Enable Interrupt in NVIC*/
	NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)TIM2_IRQn) & 0x1FUL));
 80002f8:	4b0c      	ldr	r3, [pc, #48]	; (800032c <ReloadTimerInit+0x78>)
 80002fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80002fe:	601a      	str	r2, [r3, #0]

	/*Set Interrupt Priority*/
	NVIC->IP[_IP_IDX(TIM2_IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(TIM2_IRQn)]  & ~(0xFFUL << _BIT_SHIFT(TIM2_IRQn))) |
 8000300:	4b0a      	ldr	r3, [pc, #40]	; (800032c <ReloadTimerInit+0x78>)
 8000302:	f893 3307 	ldrb.w	r3, [r3, #775]	; 0x307
 8000306:	4b09      	ldr	r3, [pc, #36]	; (800032c <ReloadTimerInit+0x78>)
 8000308:	2200      	movs	r2, #0
 800030a:	f883 2307 	strb.w	r2, [r3, #775]	; 0x307
	       (((INT_PRIORITY_0 << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(TIM2_IRQn)));

	/*TIM1 Counter enabled*/
	TIM2->CR1 |= TIM_CR1_CEN;
 800030e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000312:	681b      	ldr	r3, [r3, #0]
 8000314:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000318:	f043 0301 	orr.w	r3, r3, #1
 800031c:	6013      	str	r3, [r2, #0]

	return;
 800031e:	bf00      	nop
}
 8000320:	46bd      	mov	sp, r7
 8000322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000326:	4770      	bx	lr
 8000328:	40021000 	.word	0x40021000
 800032c:	e000e100 	.word	0xe000e100

08000330 <TIM2_IRQHandler>:
 *  @param - NA
 *
 *  @retval - NA
 **************************************************************************************************/
void TIM2_IRQHandler(void)
{
 8000330:	b580      	push	{r7, lr}
 8000332:	af00      	add	r7, sp, #0
	static uint32 i;
	i++;
 8000334:	4b0f      	ldr	r3, [pc, #60]	; (8000374 <TIM2_IRQHandler+0x44>)
 8000336:	681b      	ldr	r3, [r3, #0]
 8000338:	3301      	adds	r3, #1
 800033a:	4a0e      	ldr	r2, [pc, #56]	; (8000374 <TIM2_IRQHandler+0x44>)
 800033c:	6013      	str	r3, [r2, #0]
	//Turn OFF the LED at port PA5
	if(i > 100000)
 800033e:	4b0d      	ldr	r3, [pc, #52]	; (8000374 <TIM2_IRQHandler+0x44>)
 8000340:	681b      	ldr	r3, [r3, #0]
 8000342:	4a0d      	ldr	r2, [pc, #52]	; (8000378 <TIM2_IRQHandler+0x48>)
 8000344:	4293      	cmp	r3, r2
 8000346:	d907      	bls.n	8000358 <TIM2_IRQHandler+0x28>
	{
		i = 0;
 8000348:	4b0a      	ldr	r3, [pc, #40]	; (8000374 <TIM2_IRQHandler+0x44>)
 800034a:	2200      	movs	r2, #0
 800034c:	601a      	str	r2, [r3, #0]
		//			LameTask1();
		IOPinMode((uint8)1, (uint8)MODE_LOW);
 800034e:	2100      	movs	r1, #0
 8000350:	2001      	movs	r0, #1
 8000352:	f7ff ff79 	bl	8000248 <IOPinMode>
	else
	{
		//Do nothing
	}

	return;
 8000356:	e00a      	b.n	800036e <TIM2_IRQHandler+0x3e>
	else if (i == 50000)
 8000358:	4b06      	ldr	r3, [pc, #24]	; (8000374 <TIM2_IRQHandler+0x44>)
 800035a:	681b      	ldr	r3, [r3, #0]
 800035c:	f24c 3250 	movw	r2, #50000	; 0xc350
 8000360:	4293      	cmp	r3, r2
 8000362:	d104      	bne.n	800036e <TIM2_IRQHandler+0x3e>
		IOPinMode((uint8)1, (uint8)MODE_HIGH);
 8000364:	2101      	movs	r1, #1
 8000366:	2001      	movs	r0, #1
 8000368:	f7ff ff6e 	bl	8000248 <IOPinMode>
	return;
 800036c:	bf00      	nop
 800036e:	bf00      	nop
}
 8000370:	bd80      	pop	{r7, pc}
 8000372:	bf00      	nop
 8000374:	2000001c 	.word	0x2000001c
 8000378:	000186a0 	.word	0x000186a0

0800037c <main>:
**  Abstract: main program
**
**===========================================================================
*/
int main(void)
{
 800037c:	b580      	push	{r7, lr}
 800037e:	b082      	sub	sp, #8
 8000380:	af00      	add	r7, sp, #0
	unsigned long int i = 0;
 8000382:	2300      	movs	r3, #0
 8000384:	607b      	str	r3, [r7, #4]
	*  SCB->VTOR register.
	*  E.g.  SCB->VTOR = 0x20000000;
	*/

	/* TODO - Add your application code here */
	IOPortInit();
 8000386:	f7ff ff1f 	bl	80001c8 <IOPortInit>
	ReloadTimerInit();
 800038a:	f7ff ff93 	bl	80002b4 <ReloadTimerInit>
	/* Infinite loop */

	while (1)
 800038e:	e7fe      	b.n	800038e <main+0x12>

08000390 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000390:	f8df d034 	ldr.w	sp, [pc, #52]	; 80003c8 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000394:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000396:	e003      	b.n	80003a0 <LoopCopyDataInit>

08000398 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000398:	4b0c      	ldr	r3, [pc, #48]	; (80003cc <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800039a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800039c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800039e:	3104      	adds	r1, #4

080003a0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80003a0:	480b      	ldr	r0, [pc, #44]	; (80003d0 <LoopForever+0xa>)
	ldr	r3, =_edata
 80003a2:	4b0c      	ldr	r3, [pc, #48]	; (80003d4 <LoopForever+0xe>)
	adds	r2, r0, r1
 80003a4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80003a6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80003a8:	d3f6      	bcc.n	8000398 <CopyDataInit>
	ldr	r2, =_sbss
 80003aa:	4a0b      	ldr	r2, [pc, #44]	; (80003d8 <LoopForever+0x12>)
	b	LoopFillZerobss
 80003ac:	e002      	b.n	80003b4 <LoopFillZerobss>

080003ae <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80003ae:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80003b0:	f842 3b04 	str.w	r3, [r2], #4

080003b4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80003b4:	4b09      	ldr	r3, [pc, #36]	; (80003dc <LoopForever+0x16>)
	cmp	r2, r3
 80003b6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80003b8:	d3f9      	bcc.n	80003ae <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80003ba:	f000 f813 	bl	80003e4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80003be:	f000 f847 	bl	8000450 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80003c2:	f7ff ffdb 	bl	800037c <main>

080003c6 <LoopForever>:

LoopForever:
    b LoopForever
 80003c6:	e7fe      	b.n	80003c6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80003c8:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 80003cc:	080004b8 	.word	0x080004b8
	ldr	r0, =_sdata
 80003d0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80003d4:	20000000 	.word	0x20000000
	ldr	r2, =_sbss
 80003d8:	20000000 	.word	0x20000000
	ldr	r3, = _ebss
 80003dc:	20000020 	.word	0x20000020

080003e0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80003e0:	e7fe      	b.n	80003e0 <ADC1_2_IRQHandler>
	...

080003e4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80003e4:	b480      	push	{r7}
 80003e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80003e8:	4b17      	ldr	r3, [pc, #92]	; (8000448 <SystemInit+0x64>)
 80003ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80003ee:	4a16      	ldr	r2, [pc, #88]	; (8000448 <SystemInit+0x64>)
 80003f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80003f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80003f8:	4b14      	ldr	r3, [pc, #80]	; (800044c <SystemInit+0x68>)
 80003fa:	681b      	ldr	r3, [r3, #0]
 80003fc:	4a13      	ldr	r2, [pc, #76]	; (800044c <SystemInit+0x68>)
 80003fe:	f043 0301 	orr.w	r3, r3, #1
 8000402:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000404:	4b11      	ldr	r3, [pc, #68]	; (800044c <SystemInit+0x68>)
 8000406:	2200      	movs	r2, #0
 8000408:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800040a:	4b10      	ldr	r3, [pc, #64]	; (800044c <SystemInit+0x68>)
 800040c:	681b      	ldr	r3, [r3, #0]
 800040e:	4a0f      	ldr	r2, [pc, #60]	; (800044c <SystemInit+0x68>)
 8000410:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000414:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000418:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800041a:	4b0c      	ldr	r3, [pc, #48]	; (800044c <SystemInit+0x68>)
 800041c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000420:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000422:	4b0a      	ldr	r3, [pc, #40]	; (800044c <SystemInit+0x68>)
 8000424:	681b      	ldr	r3, [r3, #0]
 8000426:	4a09      	ldr	r2, [pc, #36]	; (800044c <SystemInit+0x68>)
 8000428:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800042c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800042e:	4b07      	ldr	r3, [pc, #28]	; (800044c <SystemInit+0x68>)
 8000430:	2200      	movs	r2, #0
 8000432:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000434:	4b04      	ldr	r3, [pc, #16]	; (8000448 <SystemInit+0x64>)
 8000436:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800043a:	609a      	str	r2, [r3, #8]
#endif
}
 800043c:	bf00      	nop
 800043e:	46bd      	mov	sp, r7
 8000440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000444:	4770      	bx	lr
 8000446:	bf00      	nop
 8000448:	e000ed00 	.word	0xe000ed00
 800044c:	40021000 	.word	0x40021000

08000450 <__libc_init_array>:
 8000450:	b570      	push	{r4, r5, r6, lr}
 8000452:	4e0d      	ldr	r6, [pc, #52]	; (8000488 <__libc_init_array+0x38>)
 8000454:	4c0d      	ldr	r4, [pc, #52]	; (800048c <__libc_init_array+0x3c>)
 8000456:	1ba4      	subs	r4, r4, r6
 8000458:	10a4      	asrs	r4, r4, #2
 800045a:	2500      	movs	r5, #0
 800045c:	42a5      	cmp	r5, r4
 800045e:	d109      	bne.n	8000474 <__libc_init_array+0x24>
 8000460:	4e0b      	ldr	r6, [pc, #44]	; (8000490 <__libc_init_array+0x40>)
 8000462:	4c0c      	ldr	r4, [pc, #48]	; (8000494 <__libc_init_array+0x44>)
 8000464:	f000 f818 	bl	8000498 <_init>
 8000468:	1ba4      	subs	r4, r4, r6
 800046a:	10a4      	asrs	r4, r4, #2
 800046c:	2500      	movs	r5, #0
 800046e:	42a5      	cmp	r5, r4
 8000470:	d105      	bne.n	800047e <__libc_init_array+0x2e>
 8000472:	bd70      	pop	{r4, r5, r6, pc}
 8000474:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000478:	4798      	blx	r3
 800047a:	3501      	adds	r5, #1
 800047c:	e7ee      	b.n	800045c <__libc_init_array+0xc>
 800047e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000482:	4798      	blx	r3
 8000484:	3501      	adds	r5, #1
 8000486:	e7f2      	b.n	800046e <__libc_init_array+0x1e>
 8000488:	080004b0 	.word	0x080004b0
 800048c:	080004b0 	.word	0x080004b0
 8000490:	080004b0 	.word	0x080004b0
 8000494:	080004b4 	.word	0x080004b4

08000498 <_init>:
 8000498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800049a:	bf00      	nop
 800049c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800049e:	bc08      	pop	{r3}
 80004a0:	469e      	mov	lr, r3
 80004a2:	4770      	bx	lr

080004a4 <_fini>:
 80004a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004a6:	bf00      	nop
 80004a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004aa:	bc08      	pop	{r3}
 80004ac:	469e      	mov	lr, r3
 80004ae:	4770      	bx	lr
