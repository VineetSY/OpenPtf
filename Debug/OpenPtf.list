
OpenPtf.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000004d8  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000660  08000660  00020040  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .init_array   00000004  08000660  08000660  00010660  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08000664  08000664  00010664  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000040  20000000  08000668  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ram2         00000000  10000000  10000000  00020040  2**0
                  CONTENTS
  7 .bss          00000020  20000040  20000040  00020040  2**2
                  ALLOC
  8 ._user_heap_stack 00000400  20000060  20000060  00020040  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000168d  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00000621  00000000  00000000  000216fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000108  00000000  00000000  00021d20  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000000a0  00000000  00000000  00021e28  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  0001ba84  00000000  00000000  00021ec8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00001ca9  00000000  00000000  0003d94c  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0009d059  00000000  00000000  0003f5f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007b  00000000  00000000  000dc64e  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000001dc  00000000  00000000  000dc6cc  2**2
                  CONTENTS, READONLY, DEBUGGING
 19 .stabstr      0000003f  00000000  00000000  000dc8a8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000040 	.word	0x20000040
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000648 	.word	0x08000648

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000044 	.word	0x20000044
 80001c4:	08000648 	.word	0x08000648

080001c8 <CLOCK_Init>:
 *  @param - NA
 *
 *  @retval- NA
 *************************************************************************************************/
void CLOCK_Init(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0

	CLOCK_SysClk_Config((uint32)CLOCK_MSI, (uint32)CLOCK_PLL_ON);
 80001cc:	2101      	movs	r1, #1
 80001ce:	2002      	movs	r0, #2
 80001d0:	f000 f810 	bl	80001f4 <CLOCK_SysClk_Config>

	/*Enabling GPIO Port A Clock*/
	RCC->AHB2ENR |= RCC_AHB2ENR_GPIOAEN;
 80001d4:	4b06      	ldr	r3, [pc, #24]	; (80001f0 <CLOCK_Init+0x28>)
 80001d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80001d8:	4a05      	ldr	r2, [pc, #20]	; (80001f0 <CLOCK_Init+0x28>)
 80001da:	f043 0301 	orr.w	r3, r3, #1
 80001de:	64d3      	str	r3, [r2, #76]	; 0x4c

	/*Timer TIM2 clock enable*/
	RCC->APB1ENR1 |= RCC_APB1ENR1_TIM2EN;
 80001e0:	4b03      	ldr	r3, [pc, #12]	; (80001f0 <CLOCK_Init+0x28>)
 80001e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80001e4:	4a02      	ldr	r2, [pc, #8]	; (80001f0 <CLOCK_Init+0x28>)
 80001e6:	f043 0301 	orr.w	r3, r3, #1
 80001ea:	6593      	str	r3, [r2, #88]	; 0x58

	return;
 80001ec:	bf00      	nop
}
 80001ee:	bd80      	pop	{r7, pc}
 80001f0:	40021000 	.word	0x40021000

080001f4 <CLOCK_SysClk_Config>:
 *  				Currently PLL only supported with CLOCK_MSI
 *
 *  @retval- NA
 *************************************************************************************************/
void CLOCK_SysClk_Config(uint32 ClkSrc, uint32 PllState)
{
 80001f4:	b480      	push	{r7}
 80001f6:	b083      	sub	sp, #12
 80001f8:	af00      	add	r7, sp, #0
 80001fa:	6078      	str	r0, [r7, #4]
 80001fc:	6039      	str	r1, [r7, #0]

	/****************************************************************************
	 * 			Enable High Speed Internal Clock (HSI = 16 MHz)
	 *****************************************************************************/
	if(CLOCK_HSI == ClkSrc)
 80001fe:	687b      	ldr	r3, [r7, #4]
 8000200:	2b01      	cmp	r3, #1
 8000202:	d11f      	bne.n	8000244 <CLOCK_SysClk_Config+0x50>
	{
		RCC->CR |= ((uint32_t)RCC_CR_HSION);
 8000204:	4b44      	ldr	r3, [pc, #272]	; (8000318 <CLOCK_SysClk_Config+0x124>)
 8000206:	681b      	ldr	r3, [r3, #0]
 8000208:	4a43      	ldr	r2, [pc, #268]	; (8000318 <CLOCK_SysClk_Config+0x124>)
 800020a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800020e:	6013      	str	r3, [r2, #0]

		/* wait until HSI is ready*/
		while ( (RCC->CR & (uint32_t) RCC_CR_HSIRDY) == 0 ) {;}
 8000210:	bf00      	nop
 8000212:	4b41      	ldr	r3, [pc, #260]	; (8000318 <CLOCK_SysClk_Config+0x124>)
 8000214:	681b      	ldr	r3, [r3, #0]
 8000216:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800021a:	2b00      	cmp	r3, #0
 800021c:	d0f9      	beq.n	8000212 <CLOCK_SysClk_Config+0x1e>

		/* Select HSI as system clock source*/
		RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 800021e:	4b3e      	ldr	r3, [pc, #248]	; (8000318 <CLOCK_SysClk_Config+0x124>)
 8000220:	689b      	ldr	r3, [r3, #8]
 8000222:	4a3d      	ldr	r2, [pc, #244]	; (8000318 <CLOCK_SysClk_Config+0x124>)
 8000224:	f023 0303 	bic.w	r3, r3, #3
 8000228:	6093      	str	r3, [r2, #8]
		RCC->CFGR |= (uint32_t)RCC_CFGR_SW_HSI;  //01: HSI16 oscillator used as system clock
 800022a:	4b3b      	ldr	r3, [pc, #236]	; (8000318 <CLOCK_SysClk_Config+0x124>)
 800022c:	689b      	ldr	r3, [r3, #8]
 800022e:	4a3a      	ldr	r2, [pc, #232]	; (8000318 <CLOCK_SysClk_Config+0x124>)
 8000230:	f043 0301 	orr.w	r3, r3, #1
 8000234:	6093      	str	r3, [r2, #8]

		/* Wait till HSI is used as system clock source*/
		while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) == 0 ) {;}
 8000236:	bf00      	nop
 8000238:	4b37      	ldr	r3, [pc, #220]	; (8000318 <CLOCK_SysClk_Config+0x124>)
 800023a:	689b      	ldr	r3, [r3, #8]
 800023c:	f003 030c 	and.w	r3, r3, #12
 8000240:	2b00      	cmp	r3, #0
 8000242:	d0f9      	beq.n	8000238 <CLOCK_SysClk_Config+0x44>
	}

	/****************************************************************************
	 * 			Multi Speed Internal Clock (MSI = 48MHz)
	 *****************************************************************************/
	if(CLOCK_MSI == ClkSrc)
 8000244:	687b      	ldr	r3, [r7, #4]
 8000246:	2b02      	cmp	r3, #2
 8000248:	d134      	bne.n	80002b4 <CLOCK_SysClk_Config+0xc0>
	{
		if((RCC->CFGR & RCC_CFGR_SWS_MSI) !=  RCC_CFGR_SWS_MSI)
 800024a:	4b33      	ldr	r3, [pc, #204]	; (8000318 <CLOCK_SysClk_Config+0x124>)
 800024c:	689b      	ldr	r3, [r3, #8]
			/*MSI can be configured when OFF*/
			RCC->CR &= ~(RCC_CR_MSION);
		}

		/*Flash wait latency for 48mhz HCLK is 2WS*/
		FLASH->ACR &= ~(FLASH_ACR_LATENCY_0WS);
 800024e:	4b33      	ldr	r3, [pc, #204]	; (800031c <CLOCK_SysClk_Config+0x128>)
 8000250:	4a32      	ldr	r2, [pc, #200]	; (800031c <CLOCK_SysClk_Config+0x128>)
 8000252:	681b      	ldr	r3, [r3, #0]
 8000254:	6013      	str	r3, [r2, #0]
		FLASH->ACR |= (FLASH_ACR_LATENCY_2WS);
 8000256:	4b31      	ldr	r3, [pc, #196]	; (800031c <CLOCK_SysClk_Config+0x128>)
 8000258:	681b      	ldr	r3, [r3, #0]
 800025a:	4a30      	ldr	r2, [pc, #192]	; (800031c <CLOCK_SysClk_Config+0x128>)
 800025c:	f043 0302 	orr.w	r3, r3, #2
 8000260:	6013      	str	r3, [r2, #0]

		/*Clear MSIRANGE in CR register and then Configure it for Range 11 ie 48MHz*/
		RCC->CR &= ~(RCC_CR_MSIRANGE);
 8000262:	4b2d      	ldr	r3, [pc, #180]	; (8000318 <CLOCK_SysClk_Config+0x124>)
 8000264:	681b      	ldr	r3, [r3, #0]
 8000266:	4a2c      	ldr	r2, [pc, #176]	; (8000318 <CLOCK_SysClk_Config+0x124>)
 8000268:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800026c:	6013      	str	r3, [r2, #0]
		RCC->CR |= RCC_CR_MSIRANGE_11;
 800026e:	4b2a      	ldr	r3, [pc, #168]	; (8000318 <CLOCK_SysClk_Config+0x124>)
 8000270:	681b      	ldr	r3, [r3, #0]
 8000272:	4a29      	ldr	r2, [pc, #164]	; (8000318 <CLOCK_SysClk_Config+0x124>)
 8000274:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8000278:	6013      	str	r3, [r2, #0]

		/*Select MSI range from CR register*/
		RCC->CR |= RCC_CR_MSIRGSEL;
 800027a:	4b27      	ldr	r3, [pc, #156]	; (8000318 <CLOCK_SysClk_Config+0x124>)
 800027c:	681b      	ldr	r3, [r3, #0]
 800027e:	4a26      	ldr	r2, [pc, #152]	; (8000318 <CLOCK_SysClk_Config+0x124>)
 8000280:	f043 0308 	orr.w	r3, r3, #8
 8000284:	6013      	str	r3, [r2, #0]
		/*Turn ON MSI and then wait for it to get Ready*/
		RCC->CR |= (RCC_CR_MSION);
 8000286:	4b24      	ldr	r3, [pc, #144]	; (8000318 <CLOCK_SysClk_Config+0x124>)
 8000288:	681b      	ldr	r3, [r3, #0]
 800028a:	4a23      	ldr	r2, [pc, #140]	; (8000318 <CLOCK_SysClk_Config+0x124>)
 800028c:	f043 0301 	orr.w	r3, r3, #1
 8000290:	6013      	str	r3, [r2, #0]
		while((RCC->CR & RCC_CR_MSIRDY) == 0) {;}
 8000292:	bf00      	nop
 8000294:	4b20      	ldr	r3, [pc, #128]	; (8000318 <CLOCK_SysClk_Config+0x124>)
 8000296:	681b      	ldr	r3, [r3, #0]
 8000298:	f003 0302 	and.w	r3, r3, #2
 800029c:	2b00      	cmp	r3, #0
 800029e:	d0f9      	beq.n	8000294 <CLOCK_SysClk_Config+0xa0>

		/*Switch Main clock to MSI*/
		RCC->CFGR &= ~(RCC_CFGR_SW);
 80002a0:	4b1d      	ldr	r3, [pc, #116]	; (8000318 <CLOCK_SysClk_Config+0x124>)
 80002a2:	689b      	ldr	r3, [r3, #8]
 80002a4:	4a1c      	ldr	r2, [pc, #112]	; (8000318 <CLOCK_SysClk_Config+0x124>)
 80002a6:	f023 0303 	bic.w	r3, r3, #3
 80002aa:	6093      	str	r3, [r2, #8]
		RCC->CFGR |= (uint32_t)RCC_CFGR_SW_MSI;
 80002ac:	4b1a      	ldr	r3, [pc, #104]	; (8000318 <CLOCK_SysClk_Config+0x124>)
 80002ae:	4a1a      	ldr	r2, [pc, #104]	; (8000318 <CLOCK_SysClk_Config+0x124>)
 80002b0:	689b      	ldr	r3, [r3, #8]
 80002b2:	6093      	str	r3, [r2, #8]
	}

	/****************************************************************************
	 * 			Enable PLL Clock (PLL_CLK = 80 MHz)
	 *****************************************************************************/
	if( (CLOCK_PLL_ON == PllState) && (CLOCK_MSI == ClkSrc) )
 80002b4:	683b      	ldr	r3, [r7, #0]
 80002b6:	2b01      	cmp	r3, #1
 80002b8:	d128      	bne.n	800030c <CLOCK_SysClk_Config+0x118>
 80002ba:	687b      	ldr	r3, [r7, #4]
 80002bc:	2b02      	cmp	r3, #2
 80002be:	d125      	bne.n	800030c <CLOCK_SysClk_Config+0x118>
	{
		/*PLL can be configured when OFF*/
		RCC->CR &= ~(RCC_CR_PLLON);
 80002c0:	4b15      	ldr	r3, [pc, #84]	; (8000318 <CLOCK_SysClk_Config+0x124>)
 80002c2:	681b      	ldr	r3, [r3, #0]
 80002c4:	4a14      	ldr	r2, [pc, #80]	; (8000318 <CLOCK_SysClk_Config+0x124>)
 80002c6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80002ca:	6013      	str	r3, [r2, #0]

		RCC->PLLCFGR |= (PLL_80MHZ);
 80002cc:	4b12      	ldr	r3, [pc, #72]	; (8000318 <CLOCK_SysClk_Config+0x124>)
 80002ce:	68da      	ldr	r2, [r3, #12]
 80002d0:	4911      	ldr	r1, [pc, #68]	; (8000318 <CLOCK_SysClk_Config+0x124>)
 80002d2:	4b13      	ldr	r3, [pc, #76]	; (8000320 <CLOCK_SysClk_Config+0x12c>)
 80002d4:	4313      	orrs	r3, r2
 80002d6:	60cb      	str	r3, [r1, #12]

		/*Turn ON PLL and then wait for it to get Ready*/
		RCC->CR |= (RCC_CR_PLLON);
 80002d8:	4b0f      	ldr	r3, [pc, #60]	; (8000318 <CLOCK_SysClk_Config+0x124>)
 80002da:	681b      	ldr	r3, [r3, #0]
 80002dc:	4a0e      	ldr	r2, [pc, #56]	; (8000318 <CLOCK_SysClk_Config+0x124>)
 80002de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80002e2:	6013      	str	r3, [r2, #0]
		while((RCC->CR & RCC_CR_PLLON) == 0) {;}
 80002e4:	bf00      	nop
 80002e6:	4b0c      	ldr	r3, [pc, #48]	; (8000318 <CLOCK_SysClk_Config+0x124>)
 80002e8:	681b      	ldr	r3, [r3, #0]
 80002ea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	d0f9      	beq.n	80002e6 <CLOCK_SysClk_Config+0xf2>

		/*Switch Main clock to PLL*/
		RCC->CFGR &= ~(RCC_CFGR_SW);
 80002f2:	4b09      	ldr	r3, [pc, #36]	; (8000318 <CLOCK_SysClk_Config+0x124>)
 80002f4:	689b      	ldr	r3, [r3, #8]
 80002f6:	4a08      	ldr	r2, [pc, #32]	; (8000318 <CLOCK_SysClk_Config+0x124>)
 80002f8:	f023 0303 	bic.w	r3, r3, #3
 80002fc:	6093      	str	r3, [r2, #8]
		RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;
 80002fe:	4b06      	ldr	r3, [pc, #24]	; (8000318 <CLOCK_SysClk_Config+0x124>)
 8000300:	689b      	ldr	r3, [r3, #8]
 8000302:	4a05      	ldr	r2, [pc, #20]	; (8000318 <CLOCK_SysClk_Config+0x124>)
 8000304:	f043 0303 	orr.w	r3, r3, #3
 8000308:	6093      	str	r3, [r2, #8]
	}

	return;
 800030a:	bf00      	nop
 800030c:	bf00      	nop
}
 800030e:	370c      	adds	r7, #12
 8000310:	46bd      	mov	sp, r7
 8000312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000316:	4770      	bx	lr
 8000318:	40021000 	.word	0x40021000
 800031c:	40022000 	.word	0x40022000
 8000320:	01001451 	.word	0x01001451

08000324 <GPIO_Init>:
 *  @param - NA
 *
 *  @retval- NA
 *************************************************************************************************/
void GPIO_Init(void)
{
 8000324:	b580      	push	{r7, lr}
 8000326:	af00      	add	r7, sp, #0

	GPIO_Pin_Config(GPIO_PA5);
 8000328:	2000      	movs	r0, #0
 800032a:	f000 f805 	bl	8000338 <GPIO_Pin_Config>
	GPIO_Pin_Config(GPIO_PA6);
 800032e:	2001      	movs	r0, #1
 8000330:	f000 f802 	bl	8000338 <GPIO_Pin_Config>

	return;
 8000334:	bf00      	nop
}
 8000336:	bd80      	pop	{r7, pc}

08000338 <GPIO_Pin_Config>:
 *  @param in - Pin: GPIO pin number to configure
 *
 *  @retval- NA
 **************************************************************************************************/
void GPIO_Pin_Config(GPIO_PinType_e Pin)
{
 8000338:	b480      	push	{r7}
 800033a:	b083      	sub	sp, #12
 800033c:	af00      	add	r7, sp, #0
 800033e:	4603      	mov	r3, r0
 8000340:	71fb      	strb	r3, [r7, #7]
	/*Setup control registers*/
	/*Mode Register for output*/
	GPIOA ->MODER |= (IOPinCfg[Pin].MODER0);
 8000342:	79fb      	ldrb	r3, [r7, #7]
 8000344:	4a2d      	ldr	r2, [pc, #180]	; (80003fc <GPIO_Pin_Config+0xc4>)
 8000346:	015b      	lsls	r3, r3, #5
 8000348:	4413      	add	r3, r2
 800034a:	681a      	ldr	r2, [r3, #0]
 800034c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000350:	681b      	ldr	r3, [r3, #0]
 8000352:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 8000356:	4313      	orrs	r3, r2
 8000358:	600b      	str	r3, [r1, #0]
	GPIOA ->MODER &= ~(IOPinCfg[Pin].MODER1);
 800035a:	79fb      	ldrb	r3, [r7, #7]
 800035c:	4a27      	ldr	r2, [pc, #156]	; (80003fc <GPIO_Pin_Config+0xc4>)
 800035e:	015b      	lsls	r3, r3, #5
 8000360:	4413      	add	r3, r2
 8000362:	3304      	adds	r3, #4
 8000364:	681b      	ldr	r3, [r3, #0]
 8000366:	43da      	mvns	r2, r3
 8000368:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800036c:	681b      	ldr	r3, [r3, #0]
 800036e:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 8000372:	4013      	ands	r3, r2
 8000374:	600b      	str	r3, [r1, #0]

	/*Output type register (push pull)*/
	GPIOA ->OTYPER &= ~(IOPinCfg[Pin].OTYPER);
 8000376:	79fb      	ldrb	r3, [r7, #7]
 8000378:	4a20      	ldr	r2, [pc, #128]	; (80003fc <GPIO_Pin_Config+0xc4>)
 800037a:	015b      	lsls	r3, r3, #5
 800037c:	4413      	add	r3, r2
 800037e:	3308      	adds	r3, #8
 8000380:	681b      	ldr	r3, [r3, #0]
 8000382:	43da      	mvns	r2, r3
 8000384:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000388:	685b      	ldr	r3, [r3, #4]
 800038a:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 800038e:	4013      	ands	r3, r2
 8000390:	604b      	str	r3, [r1, #4]

	/*SPEED Register (High speed)*/
	GPIOA ->OSPEEDR |= (IOPinCfg[Pin].OSPEEDR0 | IOPinCfg[Pin].OSPEEDR1);
 8000392:	79fb      	ldrb	r3, [r7, #7]
 8000394:	4a19      	ldr	r2, [pc, #100]	; (80003fc <GPIO_Pin_Config+0xc4>)
 8000396:	015b      	lsls	r3, r3, #5
 8000398:	4413      	add	r3, r2
 800039a:	330c      	adds	r3, #12
 800039c:	681a      	ldr	r2, [r3, #0]
 800039e:	79fb      	ldrb	r3, [r7, #7]
 80003a0:	4916      	ldr	r1, [pc, #88]	; (80003fc <GPIO_Pin_Config+0xc4>)
 80003a2:	015b      	lsls	r3, r3, #5
 80003a4:	440b      	add	r3, r1
 80003a6:	3310      	adds	r3, #16
 80003a8:	681b      	ldr	r3, [r3, #0]
 80003aa:	431a      	orrs	r2, r3
 80003ac:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80003b0:	689b      	ldr	r3, [r3, #8]
 80003b2:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 80003b6:	4313      	orrs	r3, r2
 80003b8:	608b      	str	r3, [r1, #8]

	/*Pull up pull down register*/
	GPIOA ->PUPDR &= ~(IOPinCfg[Pin].PUPDR);
 80003ba:	79fb      	ldrb	r3, [r7, #7]
 80003bc:	4a0f      	ldr	r2, [pc, #60]	; (80003fc <GPIO_Pin_Config+0xc4>)
 80003be:	015b      	lsls	r3, r3, #5
 80003c0:	4413      	add	r3, r2
 80003c2:	3314      	adds	r3, #20
 80003c4:	681b      	ldr	r3, [r3, #0]
 80003c6:	43da      	mvns	r2, r3
 80003c8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80003cc:	68db      	ldr	r3, [r3, #12]
 80003ce:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 80003d2:	4013      	ands	r3, r2
 80003d4:	60cb      	str	r3, [r1, #12]

	/*Bit set reset register*/
	GPIOA ->BSRR |= (IOPinCfg[Pin].BSRR);
 80003d6:	79fb      	ldrb	r3, [r7, #7]
 80003d8:	4a08      	ldr	r2, [pc, #32]	; (80003fc <GPIO_Pin_Config+0xc4>)
 80003da:	015b      	lsls	r3, r3, #5
 80003dc:	4413      	add	r3, r2
 80003de:	3318      	adds	r3, #24
 80003e0:	681a      	ldr	r2, [r3, #0]
 80003e2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80003e6:	699b      	ldr	r3, [r3, #24]
 80003e8:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 80003ec:	4313      	orrs	r3, r2
 80003ee:	618b      	str	r3, [r1, #24]

	return;
 80003f0:	bf00      	nop
}
 80003f2:	370c      	adds	r7, #12
 80003f4:	46bd      	mov	sp, r7
 80003f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003fa:	4770      	bx	lr
 80003fc:	20000000 	.word	0x20000000

08000400 <GPIO_PinMode_Update>:
 *  				@arg @ref MODE_HIGH  GPIO pin digital output high mode
 *
 *  @retval- NA
 **************************************************************************************************/
void GPIO_PinMode_Update(uint8 Pin, uint8 Mode)
{
 8000400:	b480      	push	{r7}
 8000402:	b083      	sub	sp, #12
 8000404:	af00      	add	r7, sp, #0
 8000406:	4603      	mov	r3, r0
 8000408:	460a      	mov	r2, r1
 800040a:	71fb      	strb	r3, [r7, #7]
 800040c:	4613      	mov	r3, r2
 800040e:	71bb      	strb	r3, [r7, #6]
	switch(Mode)
 8000410:	79bb      	ldrb	r3, [r7, #6]
 8000412:	2b00      	cmp	r3, #0
 8000414:	d002      	beq.n	800041c <GPIO_PinMode_Update+0x1c>
 8000416:	2b01      	cmp	r3, #1
 8000418:	d00e      	beq.n	8000438 <GPIO_PinMode_Update+0x38>
		case MODE_HIGH:
			GPIOA ->BSRR |= (IOPinCfg[Pin].BSRR);
			break;

		default:
			break;
 800041a:	e01b      	b.n	8000454 <GPIO_PinMode_Update+0x54>
			GPIOA ->BRR |= (IOPinCfg[Pin].BRR);
 800041c:	79fb      	ldrb	r3, [r7, #7]
 800041e:	4a10      	ldr	r2, [pc, #64]	; (8000460 <GPIO_PinMode_Update+0x60>)
 8000420:	015b      	lsls	r3, r3, #5
 8000422:	4413      	add	r3, r2
 8000424:	331c      	adds	r3, #28
 8000426:	681a      	ldr	r2, [r3, #0]
 8000428:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800042c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800042e:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 8000432:	4313      	orrs	r3, r2
 8000434:	628b      	str	r3, [r1, #40]	; 0x28
			break;
 8000436:	e00d      	b.n	8000454 <GPIO_PinMode_Update+0x54>
			GPIOA ->BSRR |= (IOPinCfg[Pin].BSRR);
 8000438:	79fb      	ldrb	r3, [r7, #7]
 800043a:	4a09      	ldr	r2, [pc, #36]	; (8000460 <GPIO_PinMode_Update+0x60>)
 800043c:	015b      	lsls	r3, r3, #5
 800043e:	4413      	add	r3, r2
 8000440:	3318      	adds	r3, #24
 8000442:	681a      	ldr	r2, [r3, #0]
 8000444:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000448:	699b      	ldr	r3, [r3, #24]
 800044a:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 800044e:	4313      	orrs	r3, r2
 8000450:	618b      	str	r3, [r1, #24]
			break;
 8000452:	bf00      	nop
	}

	return;
 8000454:	bf00      	nop
}
 8000456:	370c      	adds	r7, #12
 8000458:	46bd      	mov	sp, r7
 800045a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800045e:	4770      	bx	lr
 8000460:	20000000 	.word	0x20000000

08000464 <TIM2_IRQHandler>:
 *  @param - NA
 *
 *  @retval - NA
 *************************************************************************************************/
void TIM2_IRQHandler(void)
{
 8000464:	b580      	push	{r7, lr}
 8000466:	af00      	add	r7, sp, #0
	static uint32 i;
	i++;
 8000468:	4b13      	ldr	r3, [pc, #76]	; (80004b8 <TIM2_IRQHandler+0x54>)
 800046a:	681b      	ldr	r3, [r3, #0]
 800046c:	3301      	adds	r3, #1
 800046e:	4a12      	ldr	r2, [pc, #72]	; (80004b8 <TIM2_IRQHandler+0x54>)
 8000470:	6013      	str	r3, [r2, #0]
	//Turn OFF the LED at port PA5
	if(i > 100000)
 8000472:	4b11      	ldr	r3, [pc, #68]	; (80004b8 <TIM2_IRQHandler+0x54>)
 8000474:	681b      	ldr	r3, [r3, #0]
 8000476:	4a11      	ldr	r2, [pc, #68]	; (80004bc <TIM2_IRQHandler+0x58>)
 8000478:	4293      	cmp	r3, r2
 800047a:	d90b      	bls.n	8000494 <TIM2_IRQHandler+0x30>
	{
		i = 0;
 800047c:	4b0e      	ldr	r3, [pc, #56]	; (80004b8 <TIM2_IRQHandler+0x54>)
 800047e:	2200      	movs	r2, #0
 8000480:	601a      	str	r2, [r3, #0]
		GPIO_PinMode_Update((uint8)GPIO_PA5, (uint8)MODE_LOW);
 8000482:	2100      	movs	r1, #0
 8000484:	2000      	movs	r0, #0
 8000486:	f7ff ffbb 	bl	8000400 <GPIO_PinMode_Update>
		GPIO_PinMode_Update((uint8)GPIO_PA6, (uint8)MODE_HIGH);
 800048a:	2101      	movs	r1, #1
 800048c:	2001      	movs	r0, #1
 800048e:	f7ff ffb7 	bl	8000400 <GPIO_PinMode_Update>
	else
	{
		//Do nothing
	}

	return;
 8000492:	e00e      	b.n	80004b2 <TIM2_IRQHandler+0x4e>
	else if (i == 50000)
 8000494:	4b08      	ldr	r3, [pc, #32]	; (80004b8 <TIM2_IRQHandler+0x54>)
 8000496:	681b      	ldr	r3, [r3, #0]
 8000498:	f24c 3250 	movw	r2, #50000	; 0xc350
 800049c:	4293      	cmp	r3, r2
 800049e:	d108      	bne.n	80004b2 <TIM2_IRQHandler+0x4e>
		GPIO_PinMode_Update((uint8)GPIO_PA5, (uint8)MODE_HIGH);
 80004a0:	2101      	movs	r1, #1
 80004a2:	2000      	movs	r0, #0
 80004a4:	f7ff ffac 	bl	8000400 <GPIO_PinMode_Update>
		GPIO_PinMode_Update((uint8)GPIO_PA6, (uint8)MODE_LOW);
 80004a8:	2100      	movs	r1, #0
 80004aa:	2001      	movs	r0, #1
 80004ac:	f7ff ffa8 	bl	8000400 <GPIO_PinMode_Update>
	return;
 80004b0:	bf00      	nop
 80004b2:	bf00      	nop
}
 80004b4:	bd80      	pop	{r7, pc}
 80004b6:	bf00      	nop
 80004b8:	2000005c 	.word	0x2000005c
 80004bc:	000186a0 	.word	0x000186a0

080004c0 <TIMER_RLT_Init>:
 *  @param - NA
 *
 *  @retval - NA
 *************************************************************************************************/
void TIMER_RLT_Init(void)
{
 80004c0:	b480      	push	{r7}
 80004c2:	af00      	add	r7, sp, #0
	/*TIM1 configured as a down counter*/
	TIM2->CR1 |= TIM_CR1_DIR;
 80004c4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80004c8:	681b      	ldr	r3, [r3, #0]
 80004ca:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80004ce:	f043 0310 	orr.w	r3, r3, #16
 80004d2:	6013      	str	r3, [r2, #0]

	/*TIM1 Pre-scaler Auto reload register value set to max*/
	TIM2 ->ARR |= 0xFFFF;
 80004d4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80004d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80004da:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80004de:	ea6f 4313 	mvn.w	r3, r3, lsr #16
 80004e2:	ea6f 4303 	mvn.w	r3, r3, lsl #16
 80004e6:	62d3      	str	r3, [r2, #44]	; 0x2c

	/*TIM1 update interrupt enable*/
	TIM2->DIER |= TIM_DIER_UIE;
 80004e8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80004ec:	68db      	ldr	r3, [r3, #12]
 80004ee:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80004f2:	f043 0301 	orr.w	r3, r3, #1
 80004f6:	60d3      	str	r3, [r2, #12]

	/*Enable Interrupt in NVIC*/
	NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)TIM2_IRQn) & 0x1FUL));
 80004f8:	4b0b      	ldr	r3, [pc, #44]	; (8000528 <TIMER_RLT_Init+0x68>)
 80004fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80004fe:	601a      	str	r2, [r3, #0]

	/*Set Interrupt Priority*/
	NVIC->IP[_IP_IDX(TIM2_IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(TIM2_IRQn)]  & ~(0xFFUL << _BIT_SHIFT(TIM2_IRQn))) |
 8000500:	4b09      	ldr	r3, [pc, #36]	; (8000528 <TIMER_RLT_Init+0x68>)
 8000502:	f893 3307 	ldrb.w	r3, [r3, #775]	; 0x307
 8000506:	4b08      	ldr	r3, [pc, #32]	; (8000528 <TIMER_RLT_Init+0x68>)
 8000508:	2200      	movs	r2, #0
 800050a:	f883 2307 	strb.w	r2, [r3, #775]	; 0x307
	       (((INT_PRIORITY_0 << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(TIM2_IRQn)));

	/*TIM1 Counter enabled*/
	TIM2->CR1 |= TIM_CR1_CEN;
 800050e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000518:	f043 0301 	orr.w	r3, r3, #1
 800051c:	6013      	str	r3, [r2, #0]

	return;
 800051e:	bf00      	nop
}
 8000520:	46bd      	mov	sp, r7
 8000522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000526:	4770      	bx	lr
 8000528:	e000e100 	.word	0xe000e100

0800052c <main>:
**  Abstract: main program
**
**===========================================================================
*/
int main(void)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	af00      	add	r7, sp, #0
	*/

	/* TODO - Add your application code here */

	/* System Initialization */
	CLOCK_Init();
 8000530:	f7ff fe4a 	bl	80001c8 <CLOCK_Init>
	GPIO_Init();
 8000534:	f7ff fef6 	bl	8000324 <GPIO_Init>
	TIMER_RLT_Init();
 8000538:	f7ff ffc2 	bl	80004c0 <TIMER_RLT_Init>


	/* Infinite loop */

	while (1)
 800053c:	e7fe      	b.n	800053c <main+0x10>
	...

08000540 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000540:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000578 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000544:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000546:	e003      	b.n	8000550 <LoopCopyDataInit>

08000548 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000548:	4b0c      	ldr	r3, [pc, #48]	; (800057c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800054a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800054c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800054e:	3104      	adds	r1, #4

08000550 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000550:	480b      	ldr	r0, [pc, #44]	; (8000580 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000552:	4b0c      	ldr	r3, [pc, #48]	; (8000584 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000554:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000556:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000558:	d3f6      	bcc.n	8000548 <CopyDataInit>
	ldr	r2, =_sbss
 800055a:	4a0b      	ldr	r2, [pc, #44]	; (8000588 <LoopForever+0x12>)
	b	LoopFillZerobss
 800055c:	e002      	b.n	8000564 <LoopFillZerobss>

0800055e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800055e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000560:	f842 3b04 	str.w	r3, [r2], #4

08000564 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000564:	4b09      	ldr	r3, [pc, #36]	; (800058c <LoopForever+0x16>)
	cmp	r2, r3
 8000566:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000568:	d3f9      	bcc.n	800055e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800056a:	f000 f813 	bl	8000594 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800056e:	f000 f847 	bl	8000600 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000572:	f7ff ffdb 	bl	800052c <main>

08000576 <LoopForever>:

LoopForever:
    b LoopForever
 8000576:	e7fe      	b.n	8000576 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000578:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 800057c:	08000668 	.word	0x08000668
	ldr	r0, =_sdata
 8000580:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000584:	20000040 	.word	0x20000040
	ldr	r2, =_sbss
 8000588:	20000040 	.word	0x20000040
	ldr	r3, = _ebss
 800058c:	20000060 	.word	0x20000060

08000590 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000590:	e7fe      	b.n	8000590 <ADC1_2_IRQHandler>
	...

08000594 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000594:	b480      	push	{r7}
 8000596:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000598:	4b17      	ldr	r3, [pc, #92]	; (80005f8 <SystemInit+0x64>)
 800059a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800059e:	4a16      	ldr	r2, [pc, #88]	; (80005f8 <SystemInit+0x64>)
 80005a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80005a8:	4b14      	ldr	r3, [pc, #80]	; (80005fc <SystemInit+0x68>)
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	4a13      	ldr	r2, [pc, #76]	; (80005fc <SystemInit+0x68>)
 80005ae:	f043 0301 	orr.w	r3, r3, #1
 80005b2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80005b4:	4b11      	ldr	r3, [pc, #68]	; (80005fc <SystemInit+0x68>)
 80005b6:	2200      	movs	r2, #0
 80005b8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80005ba:	4b10      	ldr	r3, [pc, #64]	; (80005fc <SystemInit+0x68>)
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	4a0f      	ldr	r2, [pc, #60]	; (80005fc <SystemInit+0x68>)
 80005c0:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80005c4:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80005c8:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80005ca:	4b0c      	ldr	r3, [pc, #48]	; (80005fc <SystemInit+0x68>)
 80005cc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80005d0:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80005d2:	4b0a      	ldr	r3, [pc, #40]	; (80005fc <SystemInit+0x68>)
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	4a09      	ldr	r2, [pc, #36]	; (80005fc <SystemInit+0x68>)
 80005d8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80005dc:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80005de:	4b07      	ldr	r3, [pc, #28]	; (80005fc <SystemInit+0x68>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80005e4:	4b04      	ldr	r3, [pc, #16]	; (80005f8 <SystemInit+0x64>)
 80005e6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80005ea:	609a      	str	r2, [r3, #8]
#endif
}
 80005ec:	bf00      	nop
 80005ee:	46bd      	mov	sp, r7
 80005f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f4:	4770      	bx	lr
 80005f6:	bf00      	nop
 80005f8:	e000ed00 	.word	0xe000ed00
 80005fc:	40021000 	.word	0x40021000

08000600 <__libc_init_array>:
 8000600:	b570      	push	{r4, r5, r6, lr}
 8000602:	4e0d      	ldr	r6, [pc, #52]	; (8000638 <__libc_init_array+0x38>)
 8000604:	4c0d      	ldr	r4, [pc, #52]	; (800063c <__libc_init_array+0x3c>)
 8000606:	1ba4      	subs	r4, r4, r6
 8000608:	10a4      	asrs	r4, r4, #2
 800060a:	2500      	movs	r5, #0
 800060c:	42a5      	cmp	r5, r4
 800060e:	d109      	bne.n	8000624 <__libc_init_array+0x24>
 8000610:	4e0b      	ldr	r6, [pc, #44]	; (8000640 <__libc_init_array+0x40>)
 8000612:	4c0c      	ldr	r4, [pc, #48]	; (8000644 <__libc_init_array+0x44>)
 8000614:	f000 f818 	bl	8000648 <_init>
 8000618:	1ba4      	subs	r4, r4, r6
 800061a:	10a4      	asrs	r4, r4, #2
 800061c:	2500      	movs	r5, #0
 800061e:	42a5      	cmp	r5, r4
 8000620:	d105      	bne.n	800062e <__libc_init_array+0x2e>
 8000622:	bd70      	pop	{r4, r5, r6, pc}
 8000624:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000628:	4798      	blx	r3
 800062a:	3501      	adds	r5, #1
 800062c:	e7ee      	b.n	800060c <__libc_init_array+0xc>
 800062e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000632:	4798      	blx	r3
 8000634:	3501      	adds	r5, #1
 8000636:	e7f2      	b.n	800061e <__libc_init_array+0x1e>
 8000638:	08000660 	.word	0x08000660
 800063c:	08000660 	.word	0x08000660
 8000640:	08000660 	.word	0x08000660
 8000644:	08000664 	.word	0x08000664

08000648 <_init>:
 8000648:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800064a:	bf00      	nop
 800064c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800064e:	bc08      	pop	{r3}
 8000650:	469e      	mov	lr, r3
 8000652:	4770      	bx	lr

08000654 <_fini>:
 8000654:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000656:	bf00      	nop
 8000658:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800065a:	bc08      	pop	{r3}
 800065c:	469e      	mov	lr, r3
 800065e:	4770      	bx	lr
